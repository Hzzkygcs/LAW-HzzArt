<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Login</title>

    <%- include(urls.collections.dependencies(), locals) %>
    <%- include(urls.global_dependencies(), locals) %>
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>

<body>
    <%- include(urls.footer_navbar.navbar(), locals) %>
    <div class="collections-outter-container">
        <style>
            .collection-name-button{
                cursor: pointer;
                transition: color 500ms;
            }
            .collection-name-button:hover{
                color: #004d99;
            }
        </style>

        <div class="collection-name-button w-fit flex justify-start items-center pt-5 pb-7">
            <h1 class="collection-name
                       text-2xl font-bold"
                contenteditable="true">loading...</h1>
            <i class="fa fa-pencil mx-4" aria-hidden="true"></i>
        </div>

        <%- include(urls.collections.editCollectionsComponents.imageCard(), locals) %>
        <%- include(urls.collections.editCollectionsComponents.createNewImgBtnCard(), locals) %>
        <div class="collection-image-container grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-6 w-full">
        </div>
    </div>



    <div class="changes-saved-toast fixed hidden" style="bottom: 2rem; left: 50%; transform: translate(-50%, 0);">
        <div class="drop-shadow-xl rounded-xl border-2 mx-auto py-1 px-2 bg-green-600">
            <p class="text-xl font-bold text-center text-white">Changes Saved!</p>
        </div>
    </div>


        <%- include(urls.footer_navbar.footer(), locals) %>
</body>
</html>

<script>
    let collectionId = parseInt(`<%= req.query.id ?? -1 %>`);
</script>

<script>
    $( document ).ready(function() {
        if (collectionId === -1)
            prepareNewCollection();
        else
            loadCollection();

        $(".delete-button").on("click", function(event){
            event.preventDefault()
        });
    });

    function prepareNewCollection() {
        setCollectionName("my-collection");
    }
    async function loadCollection() {
        const getSpecificCollectionUrl = joinUrl(
            '<%= urls.collections.myCollectionsGetCollections() %>',
            `${collectionId}`,
        );


        let collection = await get(getSpecificCollectionUrl, {});
        const imagesId = collection.images;
        const collectionImageContainer = $(".collection-image-container");
        $(collectionImageContainer).empty();

        for (const imageId of imagesId){
            spawnNewImageCard(
                joinUrl('<%= urls.collections.myCollectionsGetImage() %>', `${imageId}`),
                collectionImageContainer
            );
        }
        setCollectionName(collection.name);
        spawnAddImageCardBtn(collectionImageContainer);
    }

    function setCollectionName(value) {
        $(".collection-name").text(value);
    }
</script>


<script class="script-handle-collection-name-edit-functionality">
    $(document).ready(function () {
        const collectionNameBtn = $(".collection-name-button");
        const collectionNameField = collectionNameBtn.find(".collection-name");
        collectionNameBtn.on('click', function () {
            collectionNameField.selectText();
        });
        collectionNameField.on('focusout', function () {
            console.log("focus out. saving...");
            saveCollectionName($(this).text(), false);
        });
        collectionNameField.keypress(function (e) {
            if (e.which !== 13)
                return;
            console.log("enter. saving...");
            saveCollectionName($(this).text());
            return false;
        });
        async function saveCollectionName(newName, blur=true) {
            if (blur)
                collectionNameField.blur();
            const url = joinUrl(
                `<%= urls.collections.myCollectionsSetName() %>`,
                `${collectionId}`
            );
            await put(url, {
                "name": newName,
            })
            showChangesSavedToast();
        }
        async function showChangesSavedToast() {
            const changesSavedToastMsg = $(".changes-saved-toast");
            await changesSavedToastMsg.fadeIn(300);
            await sleep(1000);
            await changesSavedToastMsg.fadeOut(700);
        }
    });
</script>